# Modify and add this to your .zshrc or .bashrc file
# Note that multi-file kubeconfig is not supported by kubectx, so you need to use 'kubectl config'
export RRIV_PROJECT_PATH="$HOME/path/to/rriv-cloud"
export K8S_DIRECTORY="$RRIV_PROJECT_PATH/tf/modules/do/k8s-cluster/kubeconfig"
export KUBECONFIG="$K8S_DIRECTORY/vault-dev.yaml"\
:"$K8S_DIRECTORY/rriv-dev.yaml"\
:"$K8S_DIRECTORY/vault-staging.yaml"\
:"$K8S_DIRECTORY/rriv-staging.yaml"\
:"$K8S_DIRECTORY/vault-prod.yaml"\
:"$K8S_DIRECTORY/rriv-prod.yaml"

# Get these from your DigitalOcean account.
# They should match the values for access_key and secret_key in tf/environments/../backend.hcl
export SPACES_ACCESS_KEY_ID="your_spaces_access_key_id"
export SPACES_SECRET_ACCESS_KEY="your_spaces_secret_access_key"

# Terraform secrets should ***NOT*** be stored in this repo!!!
# AI agents like Copilot can read anything you open in your editor.
# Put them in a folder outside of this repo, e.g. ../rriv-cloud-secrets
# Add this line to alias the terraform command so it can use the secrets:
tf() {
  terraform "$@" -var-file="${RRIV_PROJECT_PATH}/../rriv-cloud-secrets/secrets-${ENV}.tfvars"
}
# Directory structure:
#
# rriv-cloud/         # this repo
# rriv-cloud-secrets/ # edit these files in a basic text editor
# ├── secrets-dev.tfvars
# ├── secrets-staging.tfvars
# └── secrets-prod.tfvars
#
# Example usage:
# export ENV=dev && tf plan